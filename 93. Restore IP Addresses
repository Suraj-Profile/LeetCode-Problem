class Solution:
    def restoreIpAddresses(self, s: str) -> list:
        n = len(s)
        res = []
        if n < 4 or n > 12:
            return res
        def valid(part: str) -> bool:
            if len(part) > 1 and part[0] == '0':
                return False
            return 0 <= int(part) <= 255
        def backtrack(idx: int, parts: list) -> None:
            if len(parts) == 4:
                if idx == n:
                    res.append(".".join(parts))
                return
            remaining_parts = 4 - len(parts)
            remaining_chars = n - idx
            if remaining_chars < remaining_parts or remaining_chars > 3 * remaining_parts:
                return
            for l in range(1, 4):
                if idx + l > n:
                    break
                chunk = s[idx:idx + l]
                if valid(chunk):
                    parts.append(chunk)
                    backtrack(idx + l, parts)
                    parts.pop()
        backtrack(0, [])
        return res
